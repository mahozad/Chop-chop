- Download and install Launch4j
- Now we should build the application uber (fat) jar file (jar containing all app dependencies). There are two ways:
    - Go to IntelliJ -> Project Structure -> Artifacts -> Add -> JAR from module "Donim.main" and main class "ir.mahozad.donim.MainKt" and manifest location in src/main/resources and click ok.
      Now still in Artifacts tab, click on the just-created artifact and in the output layout tab click the plus button -> directory content and select the src/main/resources folder;
      this way the resources (including the manifest) will be included in the jar file and there will be no need to copy contents of resources folder to directory of .exe file.
      Make sure that the manifest is located in src\main\resources so the jar can be executed right away with "java -jar" without further config.
      There is a bug in IntelliJ that may not copy the manifest into the jar. If the manifest content in jar/META-INF/MANIFEST.MF is not that of the application,
      simply copy the content of the application manifest and replace in manifest file of the jar (the manifest must end with at least one newline).
      To reduce size of the JAR file, delete unused jars in the Output Layout tab. Some unneeded Jars:
      annotations, commons-io, commons-logging, kotlin-stdlib-jdk7, xalan, all non-win variants of javafx libs (like javafx-base)
    - Add a gradle plugin named "shadow" and use the task "shadowJar" to build the jar. See https://github.com/johnrengelman/shadow.
- Now build the JAR file by going to IntelliJ -> Build -> Build Artifacts... -> the artifact name from last step -> Rebuild.
  The result JAR file will be in IntelliJ output directory: out/artifacts/...
- The jar can be shrunk with proguard (https://github.com/Guardsquare/proguard/releases)
- In launch4j, either import a config file stored next to this guide file or specify at least the following in each tab:
	- Basic tab: Outputfile, Jar, Icon
	- (THIS IS OPTIONAL) Classpath tab: Main class (ir.mahozad.donim.MainKt), Classpath (.)
	- JRE tab: Min JRE version (10)
- Click Save configuration [disk icon] then Build wrapper [gear icon] to make the app .exe file
- Place everything in app resources folder in the same folder as the .exe file
    Another option is to copy everything in resources folder to the jar file and then read the files
    with getResourceAsStream instead of getResource in the code
- Click Test wrapper [play icon] (or double click .exe)

Alternatively use [gradle-launch4j plugin](https://github.com/TheBoegl/gradle-launch4j)
to automate generating .exe file by using a simpale Gradle task

also see install4j application for making executable java programs

For shrinking the application jar, there are some options:
  - Configuring the gradle shadowJar plugin to minimize the jar
    Tasks.shadowJar { minimize() }
  - Using proguard either as standalone application or its gradle plugin
    https://community.guardsquare.com/t/help-wanted-on-shrinking-a-jar-kotlin-1-4-javafx-15-java-11/371


javafx alternative:
https://www.jetbrains.com/lp/compose/

To make application executable for all platforms see the SceneBuilder application which is itself a javafx application:
https://github.com/gluonhq/scenebuilder/blob/master/app/build.gradle#L93

Jpackage is now stable in Java 16:
https://dzone.com/articles/jpackage-is-production-ready-in-java-16
